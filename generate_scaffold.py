
#  pow scaffold generator.
#
# options are: 
#    no option or -create         means create
#    -remove             removes 

import email
import string
import os
from optparse import OptionParser
import sqlite3
import sys
import datetime
from sqlalchemy.orm import mapper
from sqlalchemy import *


sys.path.append( os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "./lib" )))
sys.path.append( os.path.abspath(os.path.join( os.path.dirname(os.path.abspath(__file__)), "./models/powmodels" )))
import powlib


# setting the right defaults
MODE_CREATE = 1
MODE_REMOVE = 0
PARTS_DIR = powlib.PARTS_DIR

def main():
    parser = OptionParser()
    mode= MODE_CREATE
    #parser.add_option("-n", "--name",  action="store", type="string", dest="name", help="creates migration with name = <name>", default ="None")
    parser.add_option("-m", "--model",  action="store", type="string", dest="model", help="defines the model for this migration.", default ="None")
    parser.add_option("-f", "--force",  action="store_false",  dest="noforce", help="forces overrides of existing files",default="True")

    start = None
    end = None
    start = datetime.datetime.now()
    
    (options, args) = parser.parse_args()
    print options
    if options.model == "None":
        if len(args) > 0:
            # if no option flag (like -n) is given, it is assumed that the first argument is the model name. (representing -n arg1)
            options.model = args[0]
        else:
            parser.error("You must at least specify an appname by giving -n <name>.")
    
    scaffold(options.model, options.noforce)
    end = datetime.datetime.now()
    duration = None
    duration = end - start 
    print "generated_scaffold in("+ str(duration) +")"
    return
    
def scaffold(modelname, noforce, actions = ["list", "show","create", "edit", "message"], PARTS_DIR = powlib.PARTS_DIR, prefix_dir = "./" ):
    # 
    print "generating scaffold for model: " + str(modelname)
   
    
    for act in actions:
        # add the auto generated warning to the outputfile
        infile = open (os.path.normpath(PARTS_DIR +  "autogenerated_warning_tmpl.txt"), "r")
        ostr = infile.read()
        infile.close()
        
        # add a creation date
        ostr += "## date created: \t" + str(datetime.date.today())
        
        # Add the _stub part0 content to the newly generated file. 
        infile = open (os.path.normpath( PARTS_DIR +  "scaffold_stub_part0.tmpl"), "r")
        ostr = ostr + infile.read()
        infile.close()
        
        #pluralname = powlib.plural(model)
        #template = powlib.readconfig("pow.cfg", "global", "SCAFFOLD_TEMPLATE")
        #ostr += u"<%inherit file=\"/" + template + "\"/>"
        
        ostr += powlib.linesep
        
        # Add the _stub part1 content to the newly generated file. 
        infile = open (os.path.normpath( PARTS_DIR +  "scaffold_" + act +"_stub_part1.tmpl"), "r")
        ostr = ostr + infile.read()
        infile.close()
        filename = string.capitalize(modelname)  + "_" + act +".tmpl"
        filename = os.path.normpath( prefix_dir + "/views/" + filename)
        
        if os.path.isfile( os.path.normpath(filename) ) and noforce:
            print filename + " already exists..."
        else:
            ofile = open(  filename , "w+") 
            print  " -- created scaffold " + filename
            ofile.write( ostr )
            ofile.close()
    return
    

if __name__ == '__main__':
    main()
